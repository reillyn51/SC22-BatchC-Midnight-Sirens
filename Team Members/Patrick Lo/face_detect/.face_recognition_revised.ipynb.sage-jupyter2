{"backend_state":"running","connection_file":"/projects/7054eb54-2282-47cc-9fd4-f73d8c0d026c/.local/share/jupyter/runtime/kernel-aafb56f7-d1e9-4294-9923-69db199ee812.json","kernel":"cv_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"aicamp_face_recognition.ipynb","provenance":[]}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1658332679434,"exec_count":18,"id":"78f112","input":"# Your code here\nimport cv2\nfrom skimage import io\nimport matplotlib.pyplot as plt\nfaceCascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\nurl=\"scientists.jpg\"\npicture = io.imread(url)\ngray = cv2.cvtColor(picture, cv2.COLOR_RGB2GRAY)\nplt.axis(\"off\")\nplt.imshow(picture)\nplt.show()\nplt.axis(\"off\")\nplt.imshow(gray, cmap=\"gray\")\nplt.show()\nfaces = faceCascade.detectMultiScale(\n    gray,\n    scaleFactor=1.1,\n    minNeighbors=5,\n    minSize=(30, 30),\n    flags = cv2.CASCADE_SCALE_IMAGE\n)\nfor (x, y, w, h) in faces:\n    cv2.rectangle(picture, (x, y), (x+w, y+h), (0, 255, 0), 2)\nplt.axis(\"off\")\nplt.imshow(picture)\nplt.show()    \nprint(f\"Found {len(faces)} faces!\")\n# try out other classifiers ()\nimport cv2\nfrom skimage import io\nimport matplotlib.pyplot as plt\nfaceCascade = cv2.CascadeClassifier(cv2.data.haarcascades+'haarcascade_fullbody.xml')\nurl=\"https://media.istockphoto.com/photos/group-of-multiethnic-colourful-people-facing-backwards-picture-id488870987?k=20&m=488870987&s=612x612&w=0&h=jLCs_SrS7Qv9bhekkhlGKjt3F5kk95HRISz48j9xhWo=\"\npicture = io.imread(url)\ngray = cv2.cvtColor(picture, cv2.COLOR_RGB2GRAY)\nplt.axis(\"off\")\nplt.imshow(picture)\nplt.show()\nplt.axis(\"off\")\nplt.imshow(gray, cmap=\"gray\")\nplt.show()\nfaces = faceCascade.detectMultiScale(\n    gray,\n    scaleFactor=1.1,\n    minNeighbors=5,\n    minSize=(30, 30),\n    flags = cv2.CASCADE_SCALE_IMAGE\n)\nfor (x, y, w, h) in faces:\n    cv2.rectangle(picture, (x, y), (x+w, y+h), (0, 255, 0), 2)\n    \nplt.axis(\"off\")\nplt.imshow(picture)\nplt.show()    \nprint(f\"Found {len(faces)} bodies!\")","kernel":"cv_env","metadata":{"vscode":{"languageId":"python"}},"output":{"0":{"data":{"image/png":"84999baa81d5f2458f5816bd7b9c61e9b3a62a56","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"1":{"data":{"image/png":"6ea54e16152e47f6e69ce244e1ef558d820cfc19","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"2":{"data":{"image/png":"6fe33aeaba4e266ccccebc4e7077f373f34cb3cc","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"3":{"name":"stdout","text":"Found 3 faces!\n"},"4":{"data":{"image/png":"551b45ed7364c4601eff70e018eb2217daa37247","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"5":{"data":{"image/png":"bd12104f33a50f8cdbad54254f016eca4083e174","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"6":{"data":{"image/png":"79e824fa70943f798f1a55de0272df5ab9fde47e","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"}},"7":{"name":"stdout","text":"Found 8 bodies!\n"}},"pos":15,"start":1658332677919,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":1,"id":"76e34b","input":"#import dependencies\nimport cv2\nfrom skimage import io\nimport matplotlib.pyplot as plt","metadata":{"id":"MvO5PwWjmXDl","vscode":{"languageId":"python"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"4d41df","input":"#read the picture from the url and turn it to BGR format\npicture = io.imread(url)\n\n#convert picture to grayscale\ngray = cv2.cvtColor(picture, cv2.COLOR_RGB2GRAY)","metadata":{"id":"rvtpyzf48e_r","vscode":{"languageId":"python"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"6d304e","input":"plt.axis(\"off\")\nplt.imshow(picture)\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"Dr_8wri_5Y_z","outputId":"03a9bca6-f0f9-4208-963f-e2aca56329ad","vscode":{"languageId":"python"}},"output":{"0":{"data":{"image/png":"11eec0f94032208031329194677440cfbd4a5dfa","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"861378","input":"plt.axis(\"off\")\nplt.imshow(gray, cmap=\"gray\")\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"DiclYgTz5gXN","outputId":"6d26173c-3062-48a6-dadf-2814787c3130","vscode":{"languageId":"python"}},"output":{"0":{"data":{"image/png":"d06ca3a1592be367a0dcb02fdd3da1f0b9cacf06","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"4a8919","input":"#get the cascade classifier from the cv2 filepath\nfaceCascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n\n#url of the image\nurl = \"https://image.shutterstock.com/image-photo/young-successful-team-four-business-260nw-289449125.jpg\"","metadata":{"id":"3AeOvLI76slQ","vscode":{"languageId":"python"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"213003","input":"# Detect faces in the image\nfaces = faceCascade.detectMultiScale(\n    gray,\n    scaleFactor=1.1,\n    minNeighbors=5,\n    minSize=(30, 30),\n    flags = cv2.CASCADE_SCALE_IMAGE\n)","metadata":{"id":"qOH1m1Z69J9h","vscode":{"languageId":"python"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"0bc648","input":"#print the number of faces found\nprint(f\"Found {len(faces)} faces!\")\n\n# Draw a rectangle around the faces\nfor (x, y, w, h) in faces:\n    cv2.rectangle(picture, (x, y), (x+w, y+h), (0, 255, 0), 2)\n\n#show the image with the rectangle drawn around it\nplt.axis(\"off\")\nplt.imshow(picture)\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"Vx2rUAOH9N6p","outputId":"8e0c08b1-d83d-4bfe-bdff-cc4887bc32fb","vscode":{"languageId":"python"}},"output":{"0":{"name":"stdout","output_type":"stream","text":"Found 4 faces!\n"},"1":{"data":{"image/png":"064602e1410ab4bf6c715aa0dd831715b91e5daa","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"2abff6","input":"## Try some images of your own.\n\nThere are some other images in this folder you can experiment with, or you can use your own image to try and detect faces!\n\n","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"375f3e","input":"## Displaying the Image\n\nWe set axis to off to avoid the annoying tickmarks on the x and y axis of a pyplot plot. We then use the pyplot imshow and then show functions to show the image. We also want to view the grayscale version of the image so we do the same thing but set the image color map parameter to gray.","metadata":{"id":"2wpc7TRomH3O"},"pos":7,"type":"cell"}
{"cell_type":"markdown","id":"656575","input":"### Preprocessing the Image\n\nWe first use the io.imread() function to get the image from the url. However, we need to convert it to grayscale format because we are using the OpenCV classifier. The io image originally comes in RGB color. This is the image we will use to display the boxes around the faces. We also need to convert the image to grayscale as the OpenCV model only works on grayscale faces. \n\n","metadata":{"id":"PXRqLJQ58el8"},"pos":5,"type":"cell"}
{"cell_type":"markdown","id":"6a4795","input":"### Getting the Image and Classifier\n\nHere we will get the face detector from the OpenCV library and store it in the faceCascade library. We then put the image address/url of the image. The example url below is an image of a group of four people. If you want, you can also upload a picture of yourself to google colab and put the filepath instead of the url to run facial detection on images from your own computer. ","metadata":{"id":"6VqccN6i7k3c"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"8bbc60","input":"### Detect the Faces\n\nWe execute the detectMultiScale method to detect the faces. \n\n* The first input is the **grayscale image** we want to use for detection. \n\n* **scaleFactor** is used if the image is too large and we make it smaller by a factor of 1.1 as the face detector can only detect faces in a certain range of sizes.\n \n* **minNeighbors** is one of the most important parameters in the model. Remember, the image is first split into many small sections before classification. If minNeighbors is 5, there must be 5 other parts, or sections, of a face around a certain section if that section can be classified as part of a face (because usually one part of the face is surrounded by other parts). If you make minNeighbors larger, than the model will be much more sure about the faces it detects but it might miss some faces. If you make this smaller, the model will detect more faces but it will also make more mistakes. \n\n* **minSize** is the minimum size a face must be in order for it to be viable for detection.  \n\nThe method will output the coordinates of all the faces found.\n\n","metadata":{"id":"FcClRtog9Fpf"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"8f101c","input":"### Display the Results\n\nThe display will first output the length of the list of faces, or the number of faces, to the user. Then, for each of the face coordinates, cv2 will draw a green rectangle around the faces. Finally cv2_imshow function will display the main image with the rectangles drawn on top.","metadata":{"id":"g6MqDa0P9MVz"},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"a162e2","input":"### Dependencies\n\nFirst we will import the dependencies, or libraries, necessary for this project. The dependencies are OpenCV for the face detector, skimage for reading an image from a url, and pyplot for displaying the image in this notebook.","metadata":{"id":"6QPj94nu6zrE"},"pos":1,"type":"cell"}
{"cell_type":"markdown","id":"aebb0a","input":"# Let's Build An AI Face Detector!\n\nIn just a couple, simple lines you will be able to build your very own face detector where you can input a image url and the face detector will draw boxes around the faces before displaying the results of **AI face detection.**\n\n### Theory Behind the Model\nFirst the face detector splits the image into multiple small sections. For each section, it first runs a series of general facial tests. The sections that pass these tests move on to the next, more specific, facial tests and the ones that don't pass are disregarded. On the sections that the face detector is unsure about, it runs more and more tests (a total of 6000) until the face detector can be positive that the section is part of a face. It is like a cascade, or waterfall, of tests which is why the face detector we use is called a cascade classifier.","metadata":{"id":"npPdoLfV6RlL"},"pos":0,"type":"cell"}
{"id":"f9c2fb","input":"","pos":16,"type":"cell"}
{"id":0,"time":1658330669950,"type":"user"}
{"last_load":1658330104415,"type":"file"}