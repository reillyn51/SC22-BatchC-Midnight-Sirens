{"backend_state":"init","connection_file":"/projects/7054eb54-2282-47cc-9fd4-f73d8c0d026c/.local/share/jupyter/runtime/kernel-6c303b2e-2e30-4aef-9655-473562c045d2.json","kernel":"cv_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"8969ef","input":"# webscraping\nimport os, json  # json for pretty output\nfrom serpapi import GoogleSearch\nimport requests\n\ndef get_google_images():\n    params = {\n        # \"api_key\": os.environ.get(\"SERPAPI_KEY\"),\n        \"api_key\": \"2d6832132331b5273398c854cba07ad08d20cc26f101f3ad7fb34c74ef951b1b\",\n        \"engine\": \"google\",\n        \"q\": \"car crashes from traffic cams\", # query \n        \"tbm\": \"isch\", # images\n        \"ijn\": 0 # page number\n    }\n\n    search = GoogleSearch(params)\n    results = search.get_dict()\n    print(results)\n\n    # print(json.dumps(results['suggested_searches'], indent=2, ensure_ascii=False))\n    print(json.dumps(results[\"images_results\"], indent=2, ensure_ascii=False))\n    # save files to /SerpApi_Images/ if it doesn't exist create the folder\n    if not os.path.exists(\"./SerpApi_Images/\"):\n        os.makedirs(\"./SerpApi_Images/\")\n\n    # -----------------------\n    # Downloading images\n    headers = {\n        \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\"}\n\n    for index, image in enumerate(results[\"images_results\"]):\n\n        try:\n            print(f\"Downloading {index} image...\")\n\n            # filepath is current working directory + SerpApi_Images + params[\"q\"] + index + .jpg\n            filepath = os.path.join(\"./SerpApi_Images/\", params[\"q\"] + str(index) + \".jpg\")\n\n            response = requests.get(image['original'], headers=headers).content\n            with open(filepath, \"wb\") as f:\n                f.write(response)\n\n        except Exception as e:\n            print(e)\n            print(f\"Error downloading {index} image. Error =\", e)\n\nget_google_images()","output":{"0":{"name":"stdout","output_type":"stream","text":"https://serpapi.com/search\n"},"1":{"name":"stderr","output_type":"stream","text":"WARNING: Some output was deleted.\n"}},"pos":0,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"177bd9","input":"# upload\n# !pip install roboflow\nfrom roboflow import Roboflow\n\n\n# creating the Roboflow object\n# obtaining your API key: https://docs.roboflow.com/rest-api#obtaining-your-api-key\nrf = Roboflow(api_key=\"xtDkjy7Roda6kTuvNN0S\")\n\n# using the workspace method on the Roboflow object\nworkspace = rf.workspace()\n# print(workspace)\n# identifying the project for upload\nproject = workspace.project(\"car-crashes\")\n\n# # uploading the image to your project\n# use import os \n\nproject.upload(\"<file_name>\")","output":{"0":{"name":"stdout","output_type":"stream","text":"\rloading Roboflow workspace...\n"},"1":{"name":"stdout","output_type":"stream","text":"\rloading Roboflow project...\n"}},"pos":1,"type":"cell"}
{"id":0,"time":1658847521600,"type":"user"}
{"last_load":1658847519580,"type":"file"}